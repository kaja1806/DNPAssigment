@*@page "/CreateUser"

@using HttpClients.ClientInterfaces
@using global::Shared.DTOs
@inject IUserService UserService;

<div class="card">
    <h5>Create User</h5>

    <!-- Username Input -->
    <div class="form-group field">
        <div>
            <input type="text" @bind="_userName" placeholder="Username" @bind:event="oninput"/>
        </div>
        @if (!string.IsNullOrEmpty(_resultMsg))
        {
            <label style="color: @_color">@_resultMsg</label>
        }
    </div>

    <!-- Password Input -->
    <div class="form-group field">
        <div>
            <input type="password" @bind="_password" placeholder="Password" @bind:event="oninput"/>
        </div>
    </div>

    <!-- Create Button -->
    <div class="button-row">
        <button @onclick="Create" disabled="@(string.IsNullOrEmpty(_userName))" class="acceptbtn">Create</button>
    </div>
</div>

@code {
    private string _userName = "";
    private string? _password;
    private string _resultMsg = "";
    private string _color = "";

    private async Task Create()
    {
    // Clear any previous result messages
        _resultMsg = "";

        try
        {
    // Validate input fields before making the request
            if (string.IsNullOrWhiteSpace(_userName) || string.IsNullOrWhiteSpace(_password))
            {
                _resultMsg = "Please enter both username and password.";
                _color = "red";
            }
            else
            {
    // Attempt to create a new user
                await UserService.Create(new UserCreationDto(_userName, _password));

    // Clear the input fields after successful user creation
                _userName = "";
                _password = null;

    // Display a success message
                _resultMsg = "User successfully created";
                _color = "green";
            }
        }
        catch (Exception e)
        {
    // Handle specific error scenarios
            if (e is HttpRequestException httpException)
            {
                if (httpException.Message.Contains("duplicate username"))
                {
                    _resultMsg = "Username already exists. Please choose a different one.";
                }
                else
                {
                    _resultMsg = "An error occurred during user creation.";
                }
            }
            else
            {
    // Handle other, possibly unexpected errors
                _resultMsg = e.Message;
            }
            _color = "red";
        }
    }

}*@

@page "/CreateUser"

@using HttpClients.ClientInterfaces
@using global::Shared.DTOs
@inject IUserService UserService;

<div class="card">
    <h5>Create User</h5>

    <!-- Username Input -->
    <div class="form-group field">
        <div>
            <input type="text" @bind="_userName" placeholder="Username" @bind:event="oninput" />
        </div>
        @if (!string.IsNullOrEmpty(_resultMsg))
        {
            <label style="color: @_color">@_resultMsg</label>
        }
    </div>

    <!-- Password Input -->
    <div class="form-group field">
        <div>
            <input type="password" @bind="_password" placeholder="Password" @bind:event="oninput" />
        </div>
    </div>

    <!-- Create Button -->
    <div class="button-row">
        <button @onclick="Create" disabled="@(string.IsNullOrEmpty(_userName))" class="acceptbtn">Create</button>
    </div>
</div>

@code {
    private string _userName = "";
    private string? _password;
    private string _resultMsg = "";
    private string _color = "";

    private async Task Create()
    {
        // Clear any previous result messages
        _resultMsg = "";

        try {
            // Validate input fields before making the request
            if (string.IsNullOrWhiteSpace(_userName) || string.IsNullOrWhiteSpace(_password)) {
                _resultMsg = "Please enter both username and password.";
                _color = "red";
            } else {
                // Attempt to create a new user
                await UserService.Create(new UserCreationDto(_userName, _password));

                // Clear the input fields after successful user creation
                _userName = "";
                _password = null;

                // Display a success message
                _resultMsg = "User successfully created";
                _color = "green";
            }
        } catch (Exception e) {
            // Handle specific error scenarios
            if (e is HttpRequestException httpException) {
                if (httpException.Message.Contains("duplicate username")) {
                    _resultMsg = "Username already exists. Please choose a different one.";
                } else {
                    _resultMsg = "An error occurred during user creation.";
                }
            } else {
                // Handle other, possibly unexpected errors
                _resultMsg = e.Message;
            }
            _color = "red";
        }
    }
}
